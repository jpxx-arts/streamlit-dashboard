import streamlit as st
import pandas as pd
import altair as alt

st.set_page_config(
    page_title="An치lise Cl칤nica",
    page_icon="游뽘",
    layout="wide"
)

# --- Fun칞칚o de Carregamento de Dados ---
@st.cache_data
def load_data():
    """Carrega o dataset de Alzheimer a partir de um arquivo CSV."""
    try:
        df = pd.read_csv('alzheimers_disease_data.csv')
        df.drop(columns=["PatientID", "DoctorInCharge"], inplace=True)
        return df
    except FileNotFoundError:
        st.error("Erro: 'alzheimers_disease_data.csv' n칚o encontrado.")
        return None

df = load_data()

st.title("游뽘 An치lise Cl칤nica e de Comorbidades")

if df is not None:
    # --- Scatter Plots de Rela칞칫es ---
    st.header('An치lise de Rela칞칫es Cl칤nicas')
    
    # MMSE vs. Age
    mmse_age_scatter = alt.Chart(df).mark_circle(size=60, opacity=0.7).encode(
        x=alt.X('MMSE:Q', title='MMSE (Mini-Exame do Estado Mental)'),
        y=alt.Y('Age:Q', title='Idade'),
        color=alt.Color('Diagnosis:N', legend=alt.Legend(title='Diagn칩stico')),
        tooltip=['MMSE', 'Age', 'Diagnosis']
    ).properties(title='Rela칞칚o entre MMSE e Idade').interactive()
    st.altair_chart(mmse_age_scatter, use_container_width=True)

    # ADL vs. Functional Assessment
    adl_functional_scatter = alt.Chart(df).mark_circle(size=60, opacity=0.7).encode(
        x=alt.X('FunctionalAssessment:Q', title='Avalia칞칚o Funcional'),
        y=alt.Y('ADL:Q', title='ADL (Atividades da Vida Di치ria)'),
        color=alt.Color('Diagnosis:N', legend=alt.Legend(title='Diagn칩stico')),
        tooltip=['FunctionalAssessment', 'ADL', 'Diagnosis']
    ).properties(title='Rela칞칚o entre ADL e Avalia칞칚o Funcional').interactive()
    st.altair_chart(adl_functional_scatter, use_container_width=True)

    # --- An치lise de Depress칚o e Les칚o na Cabe칞a ---
    st.header('An치lise de Comorbidades')
    
    # An치lise de Depress칚o
    st.subheader('Depress칚o')
    col1, col2 = st.columns(2)
    with col1:
        depression_count_plot = alt.Chart(df).mark_bar().encode(
            x=alt.X('Depression:N', title='Depress칚o'),
            y=alt.Y('count():Q', title='Contagem'),
            color=alt.Color('Diagnosis:N', legend=alt.Legend(title='Diagn칩stico')),
            tooltip=['Depression', 'Diagnosis', 'count()']
        ).properties(title='Contagem de Diagn칩stico por Depress칚o')
        st.altair_chart(depression_count_plot, use_container_width=True)
    with col2:
        depression_proportion_plot = alt.Chart(df).mark_bar().encode(
            x=alt.X('Depression:N', title='Depress칚o'),
            y=alt.Y('count():Q', stack='normalize', axis=alt.Axis(format='%'), title='Porcentagem'),
            color=alt.Color('Diagnosis:N', legend=alt.Legend(title='Diagn칩stico')),
            tooltip=['Depression', 'Diagnosis']
        ).properties(title='Propor칞칚o de Diagn칩stico por Depress칚o')
        st.altair_chart(depression_proportion_plot, use_container_width=True)

    # An치lise de Les칚o na Cabe칞a
    st.subheader('Hist칩rico de Les칚o na Cabe칞a')
    col1, col2 = st.columns(2)
    with col1:
        head_injury_count_plot = alt.Chart(df).mark_bar().encode(
            x=alt.X('HeadInjury:N', title='Les칚o na Cabe칞a'),
            y=alt.Y('count():Q', title='Contagem'),
            color=alt.Color('Diagnosis:N', legend=alt.Legend(title='Diagn칩stico')),
            tooltip=['HeadInjury', 'Diagnosis', 'count()']
        ).properties(title='Contagem de Diagn칩stico por Les칚o na Cabe칞a')
        st.altair_chart(head_injury_count_plot, use_container_width=True)
    with col2:
        head_injury_proportion_plot = alt.Chart(df).mark_bar().encode(
            x=alt.X('HeadInjury:N', title='Les칚o na Cabe칞a'),
            y=alt.Y('count():Q', stack='normalize', axis=alt.Axis(format='%'), title='Porcentagem'),
            color=alt.Color('Diagnosis:N', legend=alt.Legend(title='Diagn칩stico')),
            tooltip=['HeadInjury', 'Diagnosis']
        ).properties(title='Propor칞칚o de Diagn칩stico por Les칚o na Cabe칞a')
        st.altair_chart(head_injury_proportion_plot, use_container_width=True)

    # --- Distribui칞칚o do MMSE por N칤vel de Escolaridade ---
    st.header('Distribui칞칚o do MMSE por N칤vel de Escolaridade')
    mmse_education_boxplot = alt.Chart(df).mark_boxplot(extent='min-max').encode(
        x=alt.X('EducationLevel:N', title='N칤vel de Escolaridade', sort=['Nenhum', 'Ensino m칠dio', 'Bacharelado', 'P칩s-gradua칞칚o']),
        y=alt.Y('MMSE:Q', title='MMSE'),
        color=alt.Color('EducationLevel:N', legend=None)
    ).properties(title='Distribui칞칚o do MMSE por N칤vel de Escolaridade')
    st.altair_chart(mmse_education_boxplot, use_container_width=True)
